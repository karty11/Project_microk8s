name: deploy bankapp + mysql (ArgoCD + ESO)

# on:
#  workflow_run:
#    workflows: [ "CI Pipeline" ]
#    types:
# #      - completed
on:
  workflow_dispatch:  # <-- manual trigger only

env:
  KUBE_NAMESPACE: devproject
  EXTERNAL_SECRETS_NAMESPACE: external-secrets
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  prepare_kube:
    name: Prepare kubeconfig
    runs-on: [self-hosted, linux]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubeconfig (if provided as secret)
        if: ${{ secrets.KUBECONFIG_DATA != '' }}
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 --decode > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Ensure devproject namespace exists
        run: kubectl create ns ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Ensure external-secrets namespace exists
        run: kubectl create ns ${{ env.EXTERNAL_SECRETS_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

  install_eso:
    name: Install External Secrets Operator (Helm)
    runs-on: [self-hosted, linux]
    needs: prepare_kube
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add external-secrets Helm repo
        run: |
          helm repo add external-secrets https://charts.external-secrets.io
          helm repo update

      - name: Install/Upgrade external-secrets
        run: |
          helm upgrade --install external-secrets external-secrets/external-secrets \
            -n ${EXTERNAL_SECRETS_NAMESPACE} --create-namespace \
            --wait --timeout 5m

      - name: Wait for external-secrets controller
        run: kubectl -n ${EXTERNAL_SECRETS_NAMESPACE} rollout status deployment/external-secrets-controller --timeout=120s

  apply_secretstore_and_externalsecret:
    name: Apply SecretStore + ExternalSecret
    runs-on: [self-hosted, linux]
    needs: install_eso
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Apply SecretStore (points to aws-creds)
        run: kubectl apply -f k8s/external-secrets/secretstore-aws.yaml -n ${EXTERNAL_SECRETS_NAMESPACE}

      - name: Apply ExternalSecret (creates bankapp-db-externalsecret in devproject)
        run: kubectl apply -f k8s/external-secrets/externalsecret-bankapp.yaml -n ${KUBE_NAMESPACE}

      - name: Wait for bankapp-db-externalsecret to appear
        run: |
          for i in {1..12}; do
            if kubectl get secret bankapp-db-externalsecret -n ${KUBE_NAMESPACE} >/dev/null 2>&1; then
              echo "Secret exists."
              exit 0
            else
              echo "Waiting for secret..."
              sleep 5
            fi
          done
          echo "ERROR: secret not created" >&2
          kubectl get externalsecret -n ${KUBE_NAMESPACE} -o yaml
          exit 1

  apply_argocd_apps:
    name: Apply ArgoCD Application manifests (bankapp + mysql)
    runs-on: [self-hosted, linux]
    needs: apply_secretstore_and_externalsecret
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Apply ArgoCD MySQL Application manifest
        run: kubectl apply -f argocd/mysql-application.yaml -n argocd

      - name: Apply ArgoCD Bankapp Application manifest
        run: kubectl apply -f argocd/bankapp-application.yaml -n argocd

      - name: Wait for ArgoCD apps to show synced + healthy
        run: |
          set -e
          APPS=("mysql" "bankapp-demo")
          for app in "${APPS[@]}"; do
            echo "Waiting for ArgoCD app: $app"
            for i in {1..24}; do
              SYNC=$(kubectl get application $app -n argocd -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "NotFound")
              HEALTH=$(kubectl get application $app -n argocd -o jsonpath='{.status.health.status}' 2>/dev/null || echo "NotFound")
              echo "status: sync=$SYNC, health=$HEALTH"
              if [[ "$SYNC" == "Synced" && "$HEALTH" == "Healthy" ]]; then
                echo "$app is Synced and Healthy"
                break
              fi
              sleep 10
              if [ $i -eq 24 ]; then
                echo "Timeout waiting for $app to be healthy/synced"
                kubectl describe application $app -n argocd || true
                kubectl get pods -n ${KUBE_NAMESPACE} || true
                exit 1
              fi
            done
          done

  smoke_tests:
    name: Smoke tests & final checks
    runs-on: [self-hosted]
    needs: apply_argocd_apps
    steps:
      - name: Get pods
        run: kubectl get pods -n ${KUBE_NAMESPACE} -o wide

      - name: Wait for bankapp deployment available
        run: kubectl -n ${KUBE_NAMESPACE} rollout status deployment/bankapp --timeout=120s

      - name: Wait for mysql deployment available
        run: kubectl -n ${KUBE_NAMESPACE} rollout status deployment/mysql --timeout=120s

      - name: Show secrets (debug - only base64 keys)
        run: kubectl get secret bankapp-db-externalsecret -n ${KUBE_NAMESPACE} -o yaml || true

      - name: Success note
        run: echo "âœ… CD pipeline complete. Check pods and app logs if necessary."
